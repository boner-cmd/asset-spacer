// test suite for asset spacer
// author: dimelo waterson (@boner-cmd)

global proc testAssetSpacer() {

  // to run, tests must exactly match procedure names!

  string $testList[] =  {
                        "soloX",
                        "squareX",
                        "rectangleX",
                        "oddX",
                        "oddXDiff",
                        "soloZ",
                        "squareZ",
                        "rectangleZ",
                        "oddZ",
                        "oddZDiff"
                        };
  int $totalTests = size($testList);
  if ( $totalTests == 0 ) {
    warning "Asset Spacer test list is empty.\n";
    error "Edit the MEL to add tests by procedure name.\n";
  }
  int $testPasses = runTests($testList);
  print("aspacer results: " + $testPasses + " of " + $totalTests + " passed.\n");
}

proc int runTests(string[] $testSelection) {
  int $passes
  for ( $test in $testSelection ) {
    if ( `exists $name` == 0 ) {
      string $errmsg = "Test procedure " + $name + " does not exist.\n";
      error $errmsg;
    } else {
      // possibly problematic syntax
      $passes += eval $test;
    }
  }
  return $passes;
}

// if MEL doesn't support comparing arrays element-for-element, do it ourselves
// limited to comparing axis query results (arrays of three floats)

proc int samePosition(float[] $firstPosition, float[] $secondPosition){
  int $i;
  for ($i = 0; $i < 3; $i++)) {
    if ( $firstPosition[$i] != $secondPosition[$i] ) {
      return 0;
    }
  }
  return 1;
}

// tests return 0 on fail, 1 on pass
// tests should be run in an empty viewport

proc int soloX() {
  string $cubename = "testCube1"
  if ( catch (polyCube -name $cubename) ){
    error "Test cube " + $cubename + " already exists.\n";
  }

  select $cubename;
  aSpacerCmd();

  float $pos[3] = `polyCube -q -ax $cubename`;
  // TODO actually find the correct position
  float $correctPos[3] = {0.5, 0.5, 0};
  if ( samePosition($pos, $correctPos) ){
    warning "Solo X test passed.\n";
    return 1;
  } else {
    warning "Solo X test failed. Cube " + $cubename + " in wrong position.\n";
    return 0;
  }

}

proc int squareX() {

}

proc int rectangleX() {

}

proc int oddX() {

}

proc int oddXDiff() {

}

proc int soloZ() {

}

proc int squareZ() {

}

proc int rectangleZ() {

}

proc int oddZ() {

}

proc int oddZDiff() {

}
